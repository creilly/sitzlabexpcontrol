from daqmx import *
"""

abstract class from which tasks inherit

    name: identifier for task

"""
class Task(object):        
    def __init__(self,name=None):
        if name is None:
            name = self.generateUniqueTaskName()
        self._task_names.append(name)
        self.name = name
        handle = c_int(0)
        daqmx(
            dll.DAQmxCreateTask,
            (
                name,
                byref(handle)
            )
        )
        self.handle = handle.value

    _task_names = []
    _task_names_counter = 0
    @classmethod
    def generateUniqueTaskName(cls):
        while True:
            possibleName = '%05d' % cls._task_names_counter
            cls._task_names_counter += 1
            if possibleName not in cls._task_names:
                return possibleName

    @classmethod
    def removeTaskName(cls,name):
        cls._task_names.remove(name)

    """

    get list of channels belonging to this task

    returns: list of virtual channel identifiers

    """
    def getChannels(self):
        channels = create_string_buffer(BUF_SIZE)
        daqmx(
            dll.DAQmxGetTaskChannels,
            (
                self.handle,
                channels,
                BUF_SIZE
            )
        )
        return parseStringList(channels.value)

    def clearTask(self):
        daqmx(
            dll.DAQmxClearTask,
            (
                self.handle,
            )
        )
        print 'cleared task: %s' % self.name
        self.removeTaskName(self.name)        

if __name__ == '__main__':
    print 'creating task'
    t = Task('my task')
    print 'name: %s handle: %d' % (t.name, t.handle)
    print 'creating two tasks with autogenerated name'
    r, s = Task(), Task()
    print 'name: %s handle: %d' % (r.name, r.handle)
    print 'name: %s handle: %d' % (s.name, s.handle)
