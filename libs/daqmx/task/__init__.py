from daqmx import *


class Task(object):
    """
    base class from which useful daqmx task
    classes inherit.
    """
    def __init__(self,name=None):
        """
        create a daqmx task object

        @param name: task identifier.
            must be unique. If omitted a
            unique id will be generated.
        @type name: string        
        """
        if name is None:
            name = self.generateUniqueTaskName()
        self._task_names.append(name)
        self.name = name
        handle = c_int(0)
        daqmx(
            dll.DAQmxCreateTask,
            (
                name,
                byref(handle)
            )
        )
        self.handle = handle.value

    _task_names = []
    _task_names_counter = 0
    @classmethod
    def generateUniqueTaskName(cls):
        while True:
            possibleName = '%05d' % cls._task_names_counter
            cls._task_names_counter += 1
            if possibleName not in cls._task_names:
                return possibleName

    @classmethod
    def removeTaskName(cls,name):
        cls._task_names.remove(name)

    def getChannels(self):
        """
        get list of channels belonging to this task

        @returns: list of virtual channel identifiers
        """        
        channels = create_string_buffer(BUF_SIZE)
        daqmx(
            dll.DAQmxGetTaskChannels,
            (
                self.handle,
                channels,
                BUF_SIZE
            )
        )
        return parseStringList(channels.value)

    def clearTask(self):
        daqmx(
            dll.DAQmxClearTask,
            (
                self.handle,
            )
        )
        self.removeTaskName(self.name)

    def commitTask(self):
        daqmx(
            dll.DAQmxTaskControl,
            (
                self.handle,
                constants['DAQmx_Val_Task_Commit']
            )
        )

if __name__ == '__main__':
    print 'creating task'
    t = Task('my task')
    print 'name: %s handle: %d' % (t.name, t.handle)
    print 'creating two tasks with autogenerated name'
    r, s = Task(), Task()
    print 'name: %s handle: %d' % (r.name, r.handle)
    print 'name: %s handle: %d' % (s.name, s.handle)
